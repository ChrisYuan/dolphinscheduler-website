{
  "filename": "docker-deployment.md",
  "__html": "<h2>快速试用 Docker 部署</h2>\n<p>有 2 种方式可以快速试用 DolphinScheduler，分别介绍</p>\n<h3>一、以 docker-compose 的方式启动(推荐)</h3>\n<p>这种方式需要先安装 <a href=\"https://docs.docker.com/compose/\">docker-compose</a> , docker-compose 的安装网上已经有非常多的资料，请自行安装即可</p>\n<h5>1、下载源码 zip 包</h5>\n<ul>\n<li>请下载最新版本的源码包并进行解压</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建源码存放目录</span>\nmkdir -p /opt/soft/dolphinscheduler;\ncd /opt/soft/dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 通过wget下载源码包</span>\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/dolphinscheduler/1.3.5/apache-dolphinscheduler-incubating-1.3.5-src.zip\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 通过curl下载源码包</span>\ncurl -O https://mirrors.tuna.tsinghua.edu.cn/apache/dolphinscheduler/1.3.5/apache-dolphinscheduler-incubating-1.3.5-src.zip\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 解压缩</span>\nunzip apache-dolphinscheduler-incubating-1.3.5-src.zip\n\nmv apache-dolphinscheduler-incubating-1.3.5-src-release dolphinscheduler-src\n</code></pre>\n<h5>2、安装并启动服务</h5>\n<pre><code>cd dolphinscheduler-src/docker/docker-swarm\ndocker-compose up -d\n</code></pre>\n<h5>3、登录系统</h5>\n<p>访问前端页面： <a href=\"http://192.168.xx.xx:12345/dolphinscheduler\">http://192.168.xx.xx:12345/dolphinscheduler</a></p>\n<p>默认的用户是<code>admin</code>，默认的密码是<code>dolphinscheduler123</code></p>\n <p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n然后参考用户手册章节的`快速上手`即可进行使用\n<h3>二、以 docker 方式启动</h3>\n<p>这种方式需要先安装 <a href=\"https://docs.docker.com/engine/install/\">docker</a>, docker 的安装网上已经有非常多的资料，请自行安装即可</p>\n<h5>1、基础软件安装(请自行安装)</h5>\n<ul>\n<li>PostgreSQL (8.2.15+)</li>\n<li>ZooKeeper (3.4.6+)</li>\n<li>Docker</li>\n</ul>\n<h5>2、请登录 PostgreSQL 数据库，创建名为 <code>dolphinscheduler</code> 数据库</h5>\n<h5>3、初始化数据库，导入 <code>sql/dolphinscheduler-postgre.sql</code> 进行创建表及基础数据导入</h5>\n<h5>4、下载 DolphinScheduler 镜像</h5>\n<p>我们已将面向用户的 DolphinScheduler 镜像上传至 docker 仓库，用户无需在本地构建镜像，直接执行以下命令从 docker 仓库 pull 镜像：</p>\n<pre><code>docker pull apache/dolphinscheduler:latest\n</code></pre>\n<h5>5、运行一个 DolphinScheduler 实例</h5>\n<p>如下:</p>\n<pre><code>$ docker run -d --name dolphinscheduler \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-p 12345:12345 \\\napache/dolphinscheduler:latest all\n</code></pre>\n<p>注：{username} 和 {password} 需要替换为具体的数据库用户名和密码，192.168.x.x 需要替换为 zookeeper 和 数据库的主机 IP</p>\n<h5>6、登录系统</h5>\n<p>默认的用户是<code>admin</code>，默认的密码是<code>dolphinscheduler123</code></p>\n<p>访问前端页面： <a href=\"http://192.168.xx.xx:12345/dolphinscheduler\">http://192.168.xx.xx:12345/dolphinscheduler</a></p>\n <p align=\"center\">\n   <img src=\"/img/login.png\" width=\"60%\" />\n </p>\n然后参考用户手册章节的`快速上手`即可进行使用\n<h2>附录</h2>\n<h3>在容器启动时，会自动启动以下服务：</h3>\n<pre><code>    MasterServer         ----- master服务\n    WorkerServer         ----- worker服务\n    LoggerServer         ----- logger服务\n    ApiApplicationServer ----- api服务\n    AlertServer          ----- alert服务\n</code></pre>\n<h3>如果你只是想运行 dolphinscheduler 中的部分服务</h3>\n<p>你能够通执行以下指令仅运行dolphinscheduler中的部分服务</p>\n<ul>\n<li>创建一个 <strong>本地卷</strong> 用于资源存储，如下:</li>\n</ul>\n<pre><code>docker volume create dolphinscheduler-resource-local\n</code></pre>\n<ul>\n<li>启动一个 <strong>master server</strong>, 如下:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-master \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\napache/dolphinscheduler:latest master-server\n</code></pre>\n<ul>\n<li>启动一个 <strong>worker server</strong> (包括 <strong>logger server</strong>), 如下:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-worker \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-v dolphinscheduler-resource-local:/dolphinscheduler \\\napache/dolphinscheduler:latest worker-server\n</code></pre>\n<ul>\n<li>启动一个 <strong>api server</strong>, 如下:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-api \\\n-e ZOOKEEPER_QUORUM=&quot;192.168.x.x:2181&quot; \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-v dolphinscheduler-resource-local:/dolphinscheduler \\\n-p 12345:12345 \\\napache/dolphinscheduler:latest api-server\n</code></pre>\n<ul>\n<li>启动一个 <strong>alert server</strong>, 如下:</li>\n</ul>\n<pre><code>$ docker run -d --name dolphinscheduler-alert \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\napache/dolphinscheduler:latest alert-server\n</code></pre>\n<p><strong>注意</strong>: 当你运行dolphinscheduler中的部分服务时，你必须指定这些环境变量 <code>DATABASE_HOST</code> <code>DATABASE_PORT</code> <code>DATABASE_DATABASE</code> <code>DATABASE_USERNAME</code> <code>DATABASE_PASSWORD</code> <code>ZOOKEEPER_QUORUM</code>。</p>\n<h2>环境变量</h2>\n<p>DolphinScheduler Docker 容器通过环境变量进行配置，缺省时将会使用默认值。</p>\n<p><strong><code>DATABASE_TYPE</code></strong></p>\n<p>配置<code>database</code>的<code>TYPE</code>， 默认值 <code>postgresql</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_DRIVER</code></strong></p>\n<p>配置<code>database</code>的<code>DRIVER</code>， 默认值 <code>org.postgresql.Driver</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_HOST</code></strong></p>\n<p>配置<code>database</code>的<code>HOST</code>， 默认值 <code>127.0.0.1</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_PORT</code></strong></p>\n<p>配置<code>database</code>的<code>PORT</code>， 默认值 <code>5432</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_USERNAME</code></strong></p>\n<p>配置<code>database</code>的<code>USERNAME</code>， 默认值 <code>root</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_PASSWORD</code></strong></p>\n<p>配置<code>database</code>的<code>PASSWORD</code>， 默认值 <code>root</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_DATABASE</code></strong></p>\n<p>配置<code>database</code>的<code>DATABASE</code>， 默认值 <code>dolphinscheduler</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DATABASE_PARAMS</code></strong></p>\n<p>配置<code>database</code>的<code>PARAMS</code>， 默认值 <code>characterEncoding=utf8</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>、<code>api-server</code>、<code>alert-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>DOLPHINSCHEDULER_ENV_PATH</code></strong></p>\n<p>任务执行时的环境变量配置文件， 默认值 <code>/opt/dolphinscheduler/conf/env/dolphinscheduler_env.sh</code>。</p>\n<p><strong><code>DOLPHINSCHEDULER_DATA_BASEDIR_PATH</code></strong></p>\n<p>用户数据目录, 用户自己配置, 请确保这个目录存在并且用户读写权限， 默认值 <code>/tmp/dolphinscheduler</code>。</p>\n<p><strong><code>RESOURCE_STORAGE_TYPE</code></strong></p>\n<p>配置<code>dolphinscheduler</code>的资源存储类型，可选项为 <code>HDFS</code>、<code>S3</code>、<code>NONE</code>，默认值 <code>HDFS</code>。</p>\n<p><strong><code>RESOURCE_UPLOAD_PATH</code></strong></p>\n<p>配置<code>HDFS/S3</code>上的资源存储路径，默认值 <code>/dolphinscheduler</code>。</p>\n<p><strong><code>FS_DEFAULT_FS</code></strong></p>\n<p>配置资源存储的文件系统协议，如 <code>file:///</code>, <code>hdfs://mycluster:8020</code> or <code>s3a://dolphinscheduler</code>，默认值 <code>file:///</code>。</p>\n<p><strong><code>FS_S3A_ENDPOINT</code></strong></p>\n<p>当<code>RESOURCE_STORAGE_TYPE=S3</code>时，需要配置<code>S3</code>的访问路径，默认值 <code>s3.xxx.amazonaws.com</code>。</p>\n<p><strong><code>FS_S3A_ACCESS_KEY</code></strong></p>\n<p>当<code>RESOURCE_STORAGE_TYPE=S3</code>时，需要配置<code>S3</code>的<code>s3 access key</code>，默认值 <code>xxxxxxx</code>。</p>\n<p><strong><code>FS_S3A_SECRET_KEY</code></strong></p>\n<p>当<code>RESOURCE_STORAGE_TYPE=S3</code>时，需要配置<code>S3</code>的<code>s3 secret key</code>，默认值 <code>xxxxxxx</code>。</p>\n<p><strong><code>ZOOKEEPER_QUORUM</code></strong></p>\n<p>配置<code>master-server</code>和<code>worker-serverr</code>的<code>Zookeeper</code>地址, 默认值 <code>127.0.0.1:2181</code>。</p>\n<p><strong>注意</strong>: 当运行<code>dolphinscheduler</code>中<code>master-server</code>、<code>worker-server</code>这些服务时，必须指定这个环境变量，以便于你更好的搭建分布式服务。</p>\n<p><strong><code>ZOOKEEPER_ROOT</code></strong></p>\n<p>配置<code>dolphinscheduler</code>在<code>zookeeper</code>中数据存储的根目录，默认值 <code>/dolphinscheduler</code>。</p>\n<p><strong><code>MASTER_EXEC_THREADS</code></strong></p>\n<p>配置<code>master-server</code>中的执行线程数量，默认值 <code>100</code>。</p>\n<p><strong><code>MASTER_EXEC_TASK_NUM</code></strong></p>\n<p>配置<code>master-server</code>中的执行任务数量，默认值 <code>20</code>。</p>\n<p><strong><code>MASTER_HEARTBEAT_INTERVAL</code></strong></p>\n<p>配置<code>master-server</code>中的心跳交互时间，默认值 <code>10</code>。</p>\n<p><strong><code>MASTER_TASK_COMMIT_RETRYTIMES</code></strong></p>\n<p>配置<code>master-server</code>中的任务提交重试次数，默认值 <code>5</code>。</p>\n<p><strong><code>MASTER_TASK_COMMIT_INTERVAL</code></strong></p>\n<p>配置<code>master-server</code>中的任务提交交互时间，默认值 <code>1000</code>。</p>\n<p><strong><code>MASTER_MAX_CPULOAD_AVG</code></strong></p>\n<p>配置<code>master-server</code>中的CPU中的<code>load average</code>值，默认值 <code>100</code>。</p>\n<p><strong><code>MASTER_RESERVED_MEMORY</code></strong></p>\n<p>配置<code>master-server</code>的保留内存，默认值 <code>0.1</code>。</p>\n<p><strong><code>MASTER_LISTEN_PORT</code></strong></p>\n<p>配置<code>master-server</code>的端口，默认值 <code>5678</code>。</p>\n<p><strong><code>WORKER_EXEC_THREADS</code></strong></p>\n<p>配置<code>worker-server</code>中的执行线程数量，默认值 <code>100</code>。</p>\n<p><strong><code>WORKER_HEARTBEAT_INTERVAL</code></strong></p>\n<p>配置<code>worker-server</code>中的心跳交互时间，默认值 <code>10</code>。</p>\n<p><strong><code>WORKER_MAX_CPULOAD_AVG</code></strong></p>\n<p>配置<code>worker-server</code>中的CPU中的最大<code>load average</code>值，默认值 <code>100</code>。</p>\n<p><strong><code>WORKER_RESERVED_MEMORY</code></strong></p>\n<p>配置<code>worker-server</code>的保留内存，默认值 <code>0.1</code>。</p>\n<p><strong><code>WORKER_LISTEN_PORT</code></strong></p>\n<p>配置<code>worker-server</code>的端口，默认值 <code>1234</code>。</p>\n<p><strong><code>WORKER_GROUP</code></strong></p>\n<p>配置<code>worker-server</code>的分组，默认值 <code>default</code>。</p>\n<p><strong><code>XLS_FILE_PATH</code></strong></p>\n<p>配置<code>alert-server</code>的<code>XLS</code>文件的存储路径，默认值 <code>/tmp/xls</code>。</p>\n<p><strong><code>MAIL_SERVER_HOST</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务地址，默认值 <code>空</code>。</p>\n<p><strong><code>MAIL_SERVER_PORT</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务端口，默认值 <code>空</code>。</p>\n<p><strong><code>MAIL_SENDER</code></strong></p>\n<p>配置<code>alert-server</code>的邮件发送人，默认值 <code>空</code>。</p>\n<p><strong><code>MAIL_USER=</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务用户名，默认值 <code>空</code>。</p>\n<p><strong><code>MAIL_PASSWD</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务用户密码，默认值 <code>空</code>。</p>\n<p><strong><code>MAIL_SMTP_STARTTLS_ENABLE</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务是否启用TLS，默认值 <code>true</code>。</p>\n<p><strong><code>MAIL_SMTP_SSL_ENABLE</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务是否启用SSL，默认值 <code>false</code>。</p>\n<p><strong><code>MAIL_SMTP_SSL_TRUST</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务SSL的信任地址，默认值 <code>空</code>。</p>\n<p><strong><code>ENTERPRISE_WECHAT_ENABLE</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务是否启用企业微信，默认值 <code>false</code>。</p>\n<p><strong><code>ENTERPRISE_WECHAT_CORP_ID</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务企业微信<code>ID</code>，默认值 <code>空</code>。</p>\n<p><strong><code>ENTERPRISE_WECHAT_SECRET</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务企业微信<code>SECRET</code>，默认值 <code>空</code>。</p>\n<p><strong><code>ENTERPRISE_WECHAT_AGENT_ID</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务企业微信<code>AGENT_ID</code>，默认值 <code>空</code>。</p>\n<p><strong><code>ENTERPRISE_WECHAT_USERS</code></strong></p>\n<p>配置<code>alert-server</code>的邮件服务企业微信<code>USERS</code>，默认值 <code>空</code>。</p>\n<h2>FAQ</h2>\n<h3>如何通过 docker-compose 停止 dolphinscheduler？</h3>\n<p>停止所有容器:</p>\n<pre><code>docker-compose stop\n</code></pre>\n<p>停止所有容器并移除所有容器，网络和存储卷:</p>\n<pre><code>docker-compose down -v\n</code></pre>\n<h3>如何在 Docker Swarm 上部署 dolphinscheduler？</h3>\n<p>假设 Docker Swarm 集群已经部署（如果还没有创建 Docker Swarm 集群，请参考 <a href=\"https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm/\">create-swarm</a>）</p>\n<p>启动名为 dolphinscheduler 的 stack</p>\n<pre><code>docker stack deploy -c docker-stack.yml dolphinscheduler\n</code></pre>\n<p>启动并移除名为 dolphinscheduler 的 stack</p>\n<pre><code>docker stack rm dolphinscheduler\n</code></pre>\n<h3>如何用 MySQL 替代 PostgreSQL 作为 DolphinScheduler 的数据库？</h3>\n<blockquote>\n<p>由于商业许可证的原因，我们不能直接使用 MySQL 的驱动包和客户端.</p>\n<p>如果你要使用 MySQL, 你可以基于官方镜像 <code>apache/dolphinscheduler</code> 进行构建.</p>\n</blockquote>\n<ol>\n<li>\n<p>下载 MySQL 驱动包 <a href=\"https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar\">mysql-connector-java-5.1.49.jar</a> (要求 <code>&gt;=5.1.47</code>)</p>\n</li>\n<li>\n<p>创建一个新的 <code>Dockerfile</code>，用于添加 MySQL 的驱动包和客户端:</p>\n</li>\n</ol>\n<pre><code>FROM apache/dolphinscheduler:latest\nCOPY mysql-connector-java-5.1.49.jar /opt/dolphinscheduler/lib\nRUN apk add --update --no-cache mysql-client\n</code></pre>\n<ol start=\"3\">\n<li>构建一个包含 MySQL 的驱动包和客户端的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler:mysql .\n</code></pre>\n<ol start=\"4\">\n<li>修改 <code>docker-compose.yml</code> 文件中的所有 image 字段为 <code>apache/dolphinscheduler:mysql</code></li>\n</ol>\n<blockquote>\n<p>如果你想在 Docker Swarm 上部署 dolphinscheduler，你需要修改 <code>docker-stack.yml</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>注释 <code>docker-compose.yml</code> 文件中的 <code>dolphinscheduler-postgresql</code> 块</p>\n</li>\n<li>\n<p>在 <code>docker-compose.yml</code> 文件中添加 <code>dolphinscheduler-mysql</code> 服务（<strong>可选</strong>，你可以直接使用一个外部的 MySQL 数据库）</p>\n</li>\n<li>\n<p>修改 <code>docker-compose.yml</code> 文件中的所有 DATABASE 环境变量</p>\n</li>\n</ol>\n<pre><code>DATABASE_TYPE: mysql\nDATABASE_DRIVER: com.mysql.jdbc.Driver\nDATABASE_HOST: dolphinscheduler-mysql\nDATABASE_PORT: 3306\nDATABASE_USERNAME: root\nDATABASE_PASSWORD: root\nDATABASE_DATABASE: dolphinscheduler\nDATABASE_PARAMS: useUnicode=true&amp;characterEncoding=UTF-8\n</code></pre>\n<blockquote>\n<p>如果你已经添加了 <code>dolphinscheduler-mysql</code> 服务，设置 <code>DATABASE_HOST</code> 为 <code>dolphinscheduler-mysql</code> 即可</p>\n</blockquote>\n<ol start=\"8\">\n<li>运行 dolphinscheduler (详见<strong>如何使用docker镜像</strong>)</li>\n</ol>\n<h3>如何在数据源中心支持 MySQL 数据源？</h3>\n<blockquote>\n<p>由于商业许可证的原因，我们不能直接使用 MySQL 的驱动包.</p>\n<p>如果你要添加 MySQL 数据源, 你可以基于官方镜像 <code>apache/dolphinscheduler</code> 进行构建.</p>\n</blockquote>\n<ol>\n<li>\n<p>下载 MySQL 驱动包 <a href=\"https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar\">mysql-connector-java-5.1.49.jar</a> (要求 <code>&gt;=5.1.47</code>)</p>\n</li>\n<li>\n<p>创建一个新的 <code>Dockerfile</code>，用于添加 MySQL 驱动包:</p>\n</li>\n</ol>\n<pre><code>FROM apache/dolphinscheduler:latest\nCOPY mysql-connector-java-5.1.49.jar /opt/dolphinscheduler/lib\n</code></pre>\n<ol start=\"3\">\n<li>构建一个包含 MySQL 驱动包的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler:mysql-driver .\n</code></pre>\n<ol start=\"4\">\n<li>将 <code>docker-compose.yml</code> 文件中的所有 image 字段 修改为 <code>apache/dolphinscheduler:mysql-driver</code></li>\n</ol>\n<blockquote>\n<p>如果你想在 Docker Swarm 上部署 dolphinscheduler，你需要修改 <code>docker-stack.yml</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>运行 dolphinscheduler (详见<strong>如何使用docker镜像</strong>)</p>\n</li>\n<li>\n<p>在数据源中心添加一个 MySQL 数据源</p>\n</li>\n</ol>\n<h3>如何在数据源中心支持 Oracle 数据源？</h3>\n<blockquote>\n<p>由于商业许可证的原因，我们不能直接使用 Oracle 的驱动包.</p>\n<p>如果你要添加 Oracle 数据源, 你可以基于官方镜像 <code>apache/dolphinscheduler</code> 进行构建.</p>\n</blockquote>\n<ol>\n<li>\n<p>下载 Oracle 驱动包 <a href=\"https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc8/\">ojdbc8.jar</a> (such as <code>ojdbc8-19.9.0.0.jar</code>)</p>\n</li>\n<li>\n<p>创建一个新的 <code>Dockerfile</code>，用于添加 Oracle 驱动包:</p>\n</li>\n</ol>\n<pre><code>FROM apache/dolphinscheduler:latest\nCOPY ojdbc8-19.9.0.0.jar /opt/dolphinscheduler/lib\n</code></pre>\n<ol start=\"3\">\n<li>构建一个包含 Oracle 驱动包的新镜像:</li>\n</ol>\n<pre><code>docker build -t apache/dolphinscheduler:oracle-driver .\n</code></pre>\n<ol start=\"4\">\n<li>将 <code>docker-compose.yml</code> 文件中的所有 image 字段 修改为 <code>apache/dolphinscheduler:oracle-driver</code></li>\n</ol>\n<blockquote>\n<p>如果你想在 Docker Swarm 上部署 dolphinscheduler，你需要修改 <code>docker-stack.yml</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>运行 dolphinscheduler (详见<strong>如何使用docker镜像</strong>)</p>\n</li>\n<li>\n<p>在数据源中心添加一个 Oracle 数据源</p>\n</li>\n</ol>\n<p>更多信息请查看 <a href=\"https://github.com/apache/dolphinscheduler.git\">dolphinscheduler</a> 文档.</p>\n",
  "link": "/dist/zh-cn/docs/1.3.5/user_doc/docker-deployment.html",
  "meta": {}
}