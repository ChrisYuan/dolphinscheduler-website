{
  "filename": "designplus.md",
  "__html": "<h2>System Architecture Design</h2>\n<p>Before explaining the architecture of the scheduling system, let's first understand the commonly used terms of the scheduling system</p>\n<h3>1.Glossary</h3>\n<p><strong>DAG：</strong> The full name is Directed Acyclic Graph, referred to as DAG. Task tasks in the workflow are assembled in the form of a directed acyclic graph, and topological traversal is performed from nodes with zero degrees of entry until there are no subsequent nodes. Examples are as follows:</p>\n<p align=\"center\">\n  <img src=\"/img/dag_examples_cn.jpg\" alt=\"dag example\"  width=\"60%\" />\n  <p align=\"center\">\n        <em>dag example</em>\n  </p>\n</p>\n<p><strong>Process definition</strong>: Visualization formed by dragging task nodes and establishing task node associations<strong>DAG</strong></p>\n<p><strong>Process instance</strong>: The process instance is the instantiation of the process definition, which can be generated by manual start or scheduled scheduling. Each time the process definition runs, a process instance is generated</p>\n<p><strong>Task instance</strong>: The task instance is the instantiation of the task node in the process definition, which identifies the specific task execution status</p>\n<p><strong>Task type</strong>: Currently supports SHELL, SQL, SUB_PROCESS (sub-process), PROCEDURE, MR, SPARK, PYTHON, DEPENDENT (depends), and plans to support dynamic plug-in expansion, note: <strong>SUB_PROCESS</strong>  It is also a separate process definition that can be started and executed separately</p>\n<p><strong>Scheduling method</strong>: The system supports scheduled scheduling and manual scheduling based on cron expressions. Command type support: start workflow, start execution from current node, resume fault-tolerant workflow, resume pause process, start execution from failed node, complement, timing, rerun, pause, stop, resume waiting thread. Among them <strong>Resume fault-tolerant workflow</strong> and <strong>Resume waiting thread</strong> The two command types are used by the internal control of scheduling, and cannot be called from the outside</p>\n<p><strong>Scheduled</strong>: System adopts <strong>quartz</strong> distributed scheduler, and supports the visual generation of cron expressions</p>\n<p><strong>Rely</strong>: The system not only supports <strong>DAG</strong> simple dependencies between the predecessor and successor nodes, but also provides <strong>task dependent</strong> nodes, supporting <strong>between processes</strong></p>\n<p><strong>Priority</strong>: Support the priority of process instances and task instances, if the priority of process instances and task instances is not set, the default is first-in-first-out</p>\n<p><strong>Email alert</strong>: Support <strong>SQL task</strong> Query result email sending, process instance running result email alert and fault tolerance alert notification</p>\n<p><strong>Failure strategy</strong>: For tasks running in parallel, if a task fails, two failure strategy processing methods are provided. <strong>Continue</strong> refers to regardless of the status of the task running in parallel until the end of the process failure. <strong>End</strong> means that once a failed task is found, Kill will also run the parallel task at the same time, and the process fails and ends</p>\n<p><strong>Complement</strong>: Supplement historical data，Supports <strong>interval parallel and serial</strong> two complement methods</p>\n<h3>2.Module introduction</h3>\n<ul>\n<li>\n<p>dolphinscheduler-alert alarm module, providing AlertServer service.</p>\n</li>\n<li>\n<p>dolphinscheduler-api web application module, providing ApiServer service.</p>\n</li>\n<li>\n<p>dolphinscheduler-common General constant enumeration, utility class, data structure or base class</p>\n</li>\n<li>\n<p>dolphinscheduler-dao provides operations such as database access.</p>\n</li>\n<li>\n<p>dolphinscheduler-remote client and server based on netty</p>\n</li>\n<li>\n<p>dolphinscheduler-server MasterServer and WorkerServer services</p>\n</li>\n<li>\n<p>dolphinscheduler-service service module, including Quartz, Zookeeper, log client access service, easy to call server module and api module</p>\n</li>\n<li>\n<p>dolphinscheduler-ui front-end module</p>\n</li>\n</ul>\n<h3>Sum up</h3>\n<p>From the perspective of scheduling, this article preliminarily introduces the architecture principles and implementation ideas of the big data distributed workflow scheduling system-DolphinScheduler. To be continued</p>\n",
  "link": "/dist/en-us/docs/2.0.0/user_doc/architecture/designplus.html",
  "meta": {}
}