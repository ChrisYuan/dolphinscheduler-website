{
  "filename": "task.md",
  "__html": "<h2>DolphinScheduler Task SPI main design</h2>\n<h4>How to use development environment?</h4>\n<p>Note: <strong>${VERSION}</strong> needs to be manually modified according to the current version.</p>\n<p>First you need to execute the <code>mvn -U install -Dmaven.test.skip=true</code> to install the plugin for generating the plugin JAR of the registry. The directory is: dolphinscheduler-dist/target/dolphinscheduler-dist-${VERSION}/lib/plugin/task (The version number will follow the change of the main version number)</p>\n<p>Executing this command will generate all plugins provided by default for all modules.</p>\n<p>Next, configure the plugin directory in (dolphinscheduler-server/src/main/resources/worker.properties)</p>\n<pre><code>task.plugin.dir config the #task.plugin.dir config the Task Plugin dir . WorkerServer while find and load the Task Plugin Jar from this dir when deploy and start WorkerServer on the server .\ntask.plugin.dir=./dolphinscheduler-dist/target/dolphinscheduler-dist-${VERSION}/lib/plugin/task\n</code></pre>\n<p>The following configurations can be used for local development debugging, for example:</p>\n<pre><code>maven.local.repository=/Users/localRepository\n#task.plugin.binding config the task plugin need be load when development and run in IDE\ntask.plugin.binding=./dolphinscheduler-task-plugin/dolphinscheduler-task-shell/pom.xml\n</code></pre>\n<p>Please configure according to the actual situation.</p>\n<h4>How to do task plugin development?</h4>\n<h3>Back-end development:</h3>\n<p>org.apache.dolphinscheduler.spi.task.TaskChannel</p>\n<p>The plugin should implements the above interface.  It mainly contains methods for creating tasks (task initialization, task run, etc.), task cancellation, and if it is a yarn task, it needs to implement org.apache.dolphinscheduler.plugin.task.api.AbstractYarnTask.</p>\n<p>We provide the API for all tasks to be accessed externally in the dolphinscheduler-task-api module. And dolphinscheduler-spi module is the spi common code base that defines all the plug-in modules like alert module, registry module etc. You can read it in detail to see it.</p>\n",
  "link": "/dist/en-us/development/backend/spi/task.html",
  "meta": {}
}