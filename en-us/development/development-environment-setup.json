{
  "filename": "development-environment-setup.md",
  "__html": "<h1>DolphinScheduler development</h1>\n<h2>Software Requests</h2>\n<p>Before setting up the DolphinScheduler development environment, please make sure you have installed the software as below:</p>\n<ul>\n<li><a href=\"https://git-scm.com/downloads\">Git</a>: DolphinScheduler version control system</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a>: DolphinScheduler backend language</li>\n<li><a href=\"http://maven.apache.org/download.cgi\">Maven</a>: Java Package Management System</li>\n<li><a href=\"https://nodejs.org/en/download\">Node</a>: DolphinScheduler frontend\nlanguage</li>\n</ul>\n<h3>Clone Git Repository</h3>\n<p>Download the git repository through your git management tool, here we use git-core as an example</p>\n<pre><code class=\"language-shell\">mkdir dolphinscheduler\ncd dolphinscheduler\ngit clone git@github.com:apache/dolphinscheduler.git\n</code></pre>\n<h2>Notice</h2>\n<p>There are two ways to configure the DolphinScheduler development environment, standalone mode and normal mode</p>\n<ul>\n<li><a href=\"#dolphinscheduler-standalone-quick-start\">Standalone mode</a>: <strong>Recommended</strong>，more convenient to build development environment, it can cover most scenes.</li>\n<li><a href=\"#dolphinscheduler-normal-mode\">Normal mode</a>: Separate server master, worker, api, logger, which can cover more test environments than standalone, and it is more like production environment in real life.</li>\n</ul>\n<h2>DolphinScheduler Standalone Quick Start</h2>\n<blockquote>\n<p><strong><em>Note:</em></strong> Standalone server only for development and debugging, cause it use H2 Database, Zookeeper Testing Server which may not stable in production\nIf you want to test plugin, you can modify <code>plugin.bind</code> in StandaloneServer class or modify the configuration file by yourself.\nStandalone is only supported in DolphinScheduler 1.3.9 and later versions</p>\n</blockquote>\n<h3>Git Branch Choose</h3>\n<p>Use different Git branch to develop different codes</p>\n<ul>\n<li>If you want to develop based on a binary package, switch git branch to specific release branch, for example, if you want to develop base on 1.3.9, you should choose branch <code>1.3.9-release</code>.</li>\n<li>If you want to develop the latest code, choose branch branch <code>dev</code>.</li>\n</ul>\n<h3>Start backend server</h3>\n<p>Compile backend code</p>\n<pre><code class=\"language-shell\">mvn install -DskipTests\n</code></pre>\n<p>Find the class <code>org.apache.dolphinscheduler.server.StandaloneServer</code> in Intellij IDEA and clikc run main function to startup.</p>\n<h3>Start frontend server</h3>\n<p>Install frontend dependencies and run it</p>\n<pre><code class=\"language-shell\">cd dolphinscheduler-ui\nnpm install\nnpm run start\n</code></pre>\n<p>The browser access address <a href=\"http://localhost:12345/dolphinscheduler\">http://localhost:12345/dolphinscheduler</a> can login DolphinScheduler UI. The default username and password are <strong>admin/dolphinscheduler123</strong></p>\n<h2>DolphinScheduler Normal Mode</h2>\n<h3>Prepare</h3>\n<h4>zookeeper</h4>\n<p>Download <a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3\">ZooKeeper</a>, and extract it.</p>\n<ul>\n<li>\n<p>Create directory <code>zkData</code> and <code>zkLog</code></p>\n</li>\n<li>\n<p>Go to the zookeeper installation directory, copy configure file <code>zoo_sample.cfg</code> to <code>conf/zoo.cfg</code>, and change value of dataDir in conf/zoo.cfg to dataDir=./tmp/zookeeper</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> We use path /data/zookeeper/data and /data/zookeeper/datalog here as example</span>\ndataDir=/data/zookeeper/data\ndataLogDir=/data/zookeeper/datalog\n</code></pre>\n</li>\n<li>\n<p>Run <code>./bin/zkServer.sh</code> in terminal by command <code>./bin/zkServer.sh start</code>.</p>\n</li>\n</ul>\n<h4>Database</h4>\n<p>The DolphinScheduler's metadata is stored in relational database. Currently supported MySQL and Postgresql. We use MySQL as an example. Start the database and create a new database named dolphinscheduler as DolphinScheduler metabase.</p>\n<p>After creating the new database, run the sql file under <code>dolphinscheduler/sql/dolphinscheduler_mysql.sql</code> directly in mysql to complete the database initialization.</p>\n<h4>Start Backend Server</h4>\n<p>Following steps will guide how to start the DolphinScheduler backend service.</p>\n<h5>Backend Start Prepare</h5>\n<ul>\n<li>\n<p>Open project: Use IDE open the project, here we use Intellij IDEA as an example, after opening it will take a while for Intellij IDEA to complete the dependent download</p>\n</li>\n<li>\n<p>Plugin installation(<strong>Only required for 2.0 or later</strong>): Compile plugin by command <code>mvn -U clean install -Dmaven.test.skip=true</code></p>\n<p>Note: <strong>${VERSION}</strong> needs to be manually modified according to the current version</p>\n<ul>\n<li>alert plugin config (alert.properties)</li>\n</ul>\n<pre><code class=\"language-alert.properties\"> alert.plugin.dir=../../../../dolphinscheduler-dist/target/dolphinscheduler-dist-${VERSION}/lib/plugin/alert\t\n</code></pre>\n<ul>\n<li>registry plugin config  (registry.properties)</li>\n</ul>\n<pre><code class=\"language-registry.properties\"> registry.plugin.dir=../../../../dolphinscheduler-dist/target/dolphinscheduler-dist-${VERSION}/lib/plugin/registry/zookeeper\t\n</code></pre>\n<ul>\n<li>task plugin config (worker.properties)</li>\n</ul>\n<pre><code class=\"language-worker.properties\">   task.plugin.dir=../../../../dolphinscheduler-dist/target/dolphinscheduler-dist-${VERSION}/lib/plugin/task\t\n</code></pre>\n</li>\n<li>\n<p>File change</p>\n<ul>\n<li>If you use mysql as your metadata database, you need to modify <code>dolphinscheduler/pom.xml</code> and change the dependency <code>mysql-connector-java</code> from <code>scope</code> to <code>compile</code>. This step is not necessary to use postgresql.</li>\n<li>Modify database configuration, modify the database configuration in the <code>dolphinscheduler/dolphinscheduler-dao/datasource.properties</code></li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># We here use MySQL with database, username, password named dolphinscheduler as an example</span>\n<span class=\"hljs-meta\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n<span class=\"hljs-meta\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</span>\n<span class=\"hljs-meta\">spring.datasource.username</span>=<span class=\"hljs-string\">dolphinscheduler</span>\n<span class=\"hljs-meta\">spring.datasource.password</span>=<span class=\"hljs-string\">dolphinscheduler</span>\n</code></pre>\n</li>\n<li>\n<p>Log level: Add one single line <code>&lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</code> in file <code>dolphinscheduler-server/src/main/resources/logback-worker.xml</code>, <code>dolphinscheduler-server/src/main/resources/logback-master.xml</code>, <code>dolphinscheduler-api/src/main/resources/logback-api.xml</code> to show log in console, here we add  the result after modify as below</p>\n<pre><code class=\"language-diff\">&lt;root level=&quot;INFO&quot;&gt;\n<span class=\"hljs-addition\">+  &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span>\n  &lt;appender-ref ref=&quot;APILOGFILE&quot;/&gt;\n  &lt;appender-ref ref=&quot;SKYWALKING-LOG&quot;/&gt;\n&lt;/root&gt;\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p><strong><em>Note:</em></strong> Only DolphinScheduler 2.0 and later versions need to inatall plugin before start server. It not need before version 2.0.</p>\n</blockquote>\n<h5>Server start</h5>\n<p>There are three necessary server we have to start, including MasterServer，WorkerServer，ApiApplicationServer, and a optional server you could start if you need, named LoggerServer.</p>\n<ul>\n<li>MasterServer：Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.server.master.MasterServer</code> by Intellij IDEA, with the configuration <em>VM Options</em> <code>-Dlogging.config=classpath:logback-master.xml -Ddruid.mysql.usePingMethod=false</code></li>\n<li>WorkerServer：Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.server.worker.WorkerServer</code> by Intellij IDEA, with the configuration <em>VM Options</em> <code>-Dlogging.config=classpath:logback-worker.xml -Ddruid.mysql.usePingMethod=false</code></li>\n<li>ApiApplicationServer：Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.api.ApiApplicationServer</code> by Intellij IDEA, with the configuration <em>VM Options</em> <code>-Dlogging.config=classpath:logback-api.xml -Dspring.profiles.active=api</code>. After it started, you could find Open API documentation in <a href=\"http://localhost:12345/dolphinscheduler/doc.html\">http://localhost:12345/dolphinscheduler/doc.html</a></li>\n<li>LoggerServer：<strong>Optional server, only start if you need</strong>，Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.server.log.LoggerServer</code> by Intellij IDEA</li>\n</ul>\n<h3>Start Frontend Server</h3>\n<p>Install frontend dependencies and run it</p>\n<pre><code class=\"language-shell\">cd dolphinscheduler-ui\nnpm install\nnpm run start\n</code></pre>\n<p>The browser access address <a href=\"http://localhost:12345/dolphinscheduler\">http://localhost:12345/dolphinscheduler</a> can login DolphinScheduler UI. The default username and password are <strong>admin/dolphinscheduler123</strong></p>\n",
  "link": "/dist/en-us/development/development-environment-setup.html",
  "meta": {}
}